// Code generated by go-bindata.
// sources:
// gkgen/bcp47.template
// gkgen/hexgen.template
// gkgen/main.template
// gkgen/notnil.template
// DO NOT EDIT!

package gkgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gkgenBcp47Template = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x8f\xb1\xaa\xc2\x40\x10\x45\xfb\xfd\x8a\xfb\xb6\x78\x24\x85\x8b\x85\x20\x28\x29\x54\x2c\xd2\x48\x7e\x21\xb0\xb3\xb2\x18\x37\x30\x63\xa1\x0c\xf3\xef\x92\xc5\xda\xc6\xea\x36\x87\x73\xb8\x4e\x35\x52\xca\x85\xe0\x8f\xa7\x61\xb3\xf5\x58\x99\x39\xd5\x9c\xd0\xf4\x32\x3c\x18\x01\xad\x99\xcb\x09\xc4\x8c\x5d\x87\xeb\x7c\x1b\x5f\xa1\x97\x8a\x37\x12\x54\x73\x89\xf4\x44\xb8\x8c\x77\x12\xac\xcd\xda\x7d\x65\xff\x3a\x94\x3c\x41\x1d\xa0\x8a\x43\x8c\x67\xe6\x79\xf1\x79\x62\xf6\x30\x73\x4b\x88\x26\xa1\x2f\xfe\xff\xdf\x03\x25\xda\x67\xeb\xb7\x77\x00\x00\x00\xff\xff\xd3\x2e\xd6\xee\xf2\x00\x00\x00")

func gkgenBcp47TemplateBytes() ([]byte, error) {
	return bindataRead(
		_gkgenBcp47Template,
		"gkgen/bcp47.template",
	)
}

func gkgenBcp47Template() (*asset, error) {
	bytes, err := gkgenBcp47TemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/bcp47.template", size: 242, mode: os.FileMode(420), modTime: time.Unix(1477520970, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gkgenHexgenTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\xcf\xb1\x0a\xc2\x40\x10\x04\xd0\xfe\xbe\x62\xbc\x42\x92\xc2\xc3\x5a\x49\x61\x21\x24\x8d\xf8\x0b\x81\xdb\x93\xc3\x78\x81\x5d\x8b\x93\x65\xff\x5d\x12\x6c\xad\x52\x4d\x33\xbc\x61\x9c\x6a\xa4\x94\x0b\xc1\xf7\x54\x3d\x0e\x66\x4e\x35\x27\x34\x83\xdc\xdf\x8c\x80\xd6\xcc\xe5\x04\x62\xc6\xa9\xc3\x63\x7e\x8e\x9f\x30\x48\x4f\xb5\x91\xa0\x9a\x4b\xa4\x8a\x70\x1b\x5f\x24\x38\x9a\xb5\xe7\xb5\xb9\xeb\x50\xf2\x04\x75\x80\x2a\x2e\x31\x5e\x99\xe7\x45\xf3\xc4\xec\x61\xe6\x96\x19\x9a\x84\xfe\xea\xfb\xed\x7c\x89\xf6\xcb\xf5\xd7\x37\x00\x00\xff\xff\xcd\xc1\x69\xaa\xec\x00\x00\x00")

func gkgenHexgenTemplateBytes() ([]byte, error) {
	return bindataRead(
		_gkgenHexgenTemplate,
		"gkgen/hexgen.template",
	)
}

func gkgenHexgenTemplate() (*asset, error) {
	bytes, err := gkgenHexgenTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/hexgen.template", size: 236, mode: os.FileMode(420), modTime: time.Unix(1477526630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gkgenMainTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\x4d\x6b\xdc\x30\x10\xbd\xeb\x57\x3c\xcc\x42\xed\xa5\x6b\xef\x39\xb0\x39\xb4\xa4\x10\x68\xda\x43\x4b\x2f\xa5\x07\xd5\x1e\xdb\x62\x25\xd9\xc8\x72\xda\x54\xe8\xbf\x17\xc9\xf2\xc6\x4b\x4a\xc9\x1e\x16\x89\x79\x33\xef\x43\x63\xe7\x0e\x68\xa8\x15\x9a\x90\xf5\xc4\x1b\x32\x99\xf7\x6c\xe4\xf5\x99\x77\x04\xe7\xca\x74\xf4\x9e\x31\xa1\xc6\xc1\x58\xe4\x2c\xeb\x84\xed\xe7\x9f\x65\x3d\xa8\xea\x0f\xe9\x7a\x68\xc8\x54\xdd\x70\xe6\x4f\xcb\x7f\xc6\x0a\xe6\x1c\xe9\x06\x87\xd0\xb7\xe5\x98\xac\x99\x6b\x1b\x38\x9c\xdb\x99\x59\xd2\x03\x1f\x71\x73\x42\x19\xce\x53\xc4\xb7\xb3\xae\x91\x4f\xd8\x3b\x57\x6a\xae\xc8\xfb\x02\xdf\xb8\x14\x0d\xb7\x84\xbc\x40\x4e\xc6\x0c\xa6\x80\x63\x80\x73\xd5\x1e\x9f\xb5\x7c\x82\xe2\x67\x82\xed\x09\xb1\x3a\x41\xf1\x11\xa2\xc5\x2f\x7a\x63\x08\xdd\x20\x74\x07\x3b\x60\x9e\x08\xc2\x96\xd8\x57\xde\xc7\xf6\x80\xe9\x2c\x72\x49\x3a\x69\x28\x70\x44\x2c\x92\x0a\xc2\xc2\xdc\x3c\xba\x2a\xef\xc2\xe4\x07\x3e\x16\x4b\x67\xf0\x97\xa6\x54\x7b\xdc\x5b\x32\x41\xa0\xed\xcd\x30\x77\x7d\x94\xd2\x0a\x92\xcd\x84\xa1\x8d\xb7\xc5\xfa\x33\xb5\xe1\xba\x23\xec\x84\x6e\xe8\xf7\x5b\xec\x22\x38\x46\x31\xd9\xf2\x43\xec\x2c\x3f\x8a\xc9\xc6\x4c\x80\x48\xb9\x0b\x79\x04\x4c\x1e\xbb\x52\x53\xf9\x89\x2b\x9a\x70\x2c\xe2\xe1\x0a\xbf\xa4\x7a\x73\x42\xc2\xaf\x89\x2f\x83\x36\xc8\x4d\x0c\xbb\x4b\x0c\x6b\xbd\xaa\xf0\x8e\x3a\xa1\x9f\x25\x78\xbf\x3e\x89\x18\xf4\xc4\x22\xea\x91\x9b\x14\xfe\x16\xb6\x89\xee\x8b\x14\x35\xb1\xc4\x78\x40\xf2\x6f\xee\x53\x00\x81\x36\x48\x4d\xa2\x13\x77\x64\x5f\xad\x5c\x14\x45\xcd\xef\xb9\x94\x5f\x49\x8d\x32\xe4\xbe\xd4\x53\x8a\x17\x5f\x87\xf0\x4a\x61\x07\xc3\x55\xb4\x90\xa4\xf3\x17\x1a\x0b\xdc\xe2\x18\xd7\x29\xfc\x48\x7d\xcf\x36\xc5\xec\x07\x4e\x2f\x6d\x45\x6c\x1a\x5b\x55\xb8\xd3\xcd\xff\xb3\xb9\x5e\x97\x55\xd5\x76\x7f\xeb\x9e\xea\xf3\x3f\x17\x18\x3d\x7f\x24\xc4\x50\x5e\xb7\xb8\xab\x4f\x55\xe0\x76\xf5\x65\xc8\xce\x46\x83\x14\x0b\xba\xaf\x45\xa4\x9a\x16\x92\xf9\xe5\xbb\xf5\x9e\xfd\x0d\x00\x00\xff\xff\x3a\x45\x22\x7f\x19\x04\x00\x00")

func gkgenMainTemplateBytes() ([]byte, error) {
	return bindataRead(
		_gkgenMainTemplate,
		"gkgen/main.template",
	)
}

func gkgenMainTemplate() (*asset, error) {
	bytes, err := gkgenMainTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/main.template", size: 1049, mode: os.FileMode(420), modTime: time.Unix(1477528018, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gkgenNotnilTemplate = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\xcd\xbd\x6a\xc4\x30\x10\x04\xe0\xde\x4f\x31\xa8\x4a\x8a\xc8\x79\x01\x17\x29\x52\x5c\x23\x0c\xd7\xba\x31\x68\x05\xcb\xe9\x56\x46\xd2\xfd\xc0\xa2\x77\x3f\x64\xbb\x9b\x1d\xf8\x76\x54\x3d\x05\x16\x82\x71\xa9\x3a\x8e\xa6\xb5\x01\x50\x05\x07\x5c\xca\x5c\x33\x2c\xf6\x8a\x03\x8a\x55\x65\xf1\xf4\x86\x75\xeb\x9d\x0a\x7e\x5b\xc3\x34\x41\x38\x42\x07\x60\x77\x7f\xde\xff\xe7\x9c\xba\x33\xd4\x43\xb1\x8e\x5e\x5f\x8b\xe1\x02\xc7\x71\x31\xdf\xe6\x78\x78\xee\x50\x2c\x74\x14\xe3\x88\xeb\x8d\xb7\x8d\x3c\x5c\x12\xcc\x89\xa5\x52\xc6\x73\x8d\x0f\x42\x48\xb9\x73\x50\x3f\xd7\xca\x49\x4e\x2e\xbe\x6b\xd5\x1e\x7e\x5a\x1b\x3e\x01\x00\x00\xff\xff\xc3\x99\xa3\x41\xd1\x00\x00\x00")

func gkgenNotnilTemplateBytes() ([]byte, error) {
	return bindataRead(
		_gkgenNotnilTemplate,
		"gkgen/notnil.template",
	)
}

func gkgenNotnilTemplate() (*asset, error) {
	bytes, err := gkgenNotnilTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/notnil.template", size: 209, mode: os.FileMode(420), modTime: time.Unix(1477587884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gkgen/bcp47.template": gkgenBcp47Template,
	"gkgen/hexgen.template": gkgenHexgenTemplate,
	"gkgen/main.template": gkgenMainTemplate,
	"gkgen/notnil.template": gkgenNotnilTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gkgen": &bintree{nil, map[string]*bintree{
		"bcp47.template": &bintree{gkgenBcp47Template, map[string]*bintree{}},
		"hexgen.template": &bintree{gkgenHexgenTemplate, map[string]*bintree{}},
		"main.template": &bintree{gkgenMainTemplate, map[string]*bintree{}},
		"notnil.template": &bintree{gkgenNotnilTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

