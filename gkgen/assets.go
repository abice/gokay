// Code generated by go-bindata.
// sources:
// gkgen/bcp47.tmpl
// gkgen/dive.tmpl
// gkgen/hex.tmpl
// gkgen/len.tmpl
// gkgen/length.tmpl
// gkgen/main.tmpl
// gkgen/notnil.tmpl
// gkgen/required.tmpl
// gkgen/uuid.tmpl
// DO NOT EDIT!

package gkgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gkgenBcp47Tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xc1\x6b\x14\x31\x18\xc5\xef\xf3\x57\x3c\x03\xb1\x3b\xcb\x76\xe6\x52\x28\x54\x7a\x50\x51\xe9\x45\x7a\x10\x2f\xcb\x42\xd3\xcd\x97\xd9\x60\x36\x19\x93\x50\x5d\x42\xfe\x77\x49\xe2\xea\x56\x56\x3d\xcd\x10\x92\xf7\x7b\xef\xfb\x5e\x4a\xe3\xb2\x03\xde\xbc\xbd\xbf\xba\xfe\x2c\x8c\x96\x22\x3a\x8f\x89\x2c\x79\x11\x29\x60\xeb\x24\x21\xee\x44\xc4\x37\x6d\x0c\x9e\xc8\x6b\x75\x80\x56\x10\x50\x9a\x8c\x84\x0e\x10\xed\x39\xb6\x6e\x3f\x8b\xa8\x1f\x0d\x21\x44\xaf\xed\xd4\x01\xbb\x18\xe7\x70\x33\x8e\xd1\x39\x13\x06\x4d\x51\x0d\xce\x4f\xe3\x2e\xee\xcd\xf8\xb8\x9d\xaf\xae\xbb\xe5\x98\x73\x97\x92\x24\xa5\x2d\x81\x55\x29\x56\x8f\x0a\x86\xbe\x62\x78\x5f\x40\x9f\x0e\x33\x81\x35\x5d\x06\xb6\x3c\xfe\xe5\xdc\x95\x6b\xde\xe3\xe6\x16\x93\xfb\x22\x0e\xc3\x5d\xa8\x22\x8b\x94\xb4\x82\x75\x11\x8b\xbb\x70\x1f\x3d\x06\xf4\x39\xbf\x4c\x89\xac\xcc\x39\x0c\x29\x35\xe5\x8f\x62\x4f\x39\xf7\xaf\xaa\xc8\x8b\x5b\x58\x6d\x90\x3a\x20\x25\xbc\x96\xf2\x9d\xf7\xae\x3c\x65\xe4\x7d\xa5\x55\x67\x64\x02\x9d\xb1\xb7\xde\xfc\x32\xb8\xde\x1c\x2d\xe6\xdc\x29\xe7\xa1\xad\xa4\xef\x2b\x04\x6d\x27\x43\xcf\xd9\xc5\xba\x17\x76\x22\xfc\xe9\xaa\x1a\xf9\x67\xbe\xbf\x39\x38\x49\x7a\x86\xf8\xbf\xb4\x8b\xd9\x6b\x1b\x15\x1e\xd4\x3e\x0e\xf5\x50\x2d\x18\xe7\x61\xcd\xb9\xdc\xe0\x12\x9c\x07\xb6\x7a\x1e\x89\x87\x55\xd1\xec\x1f\xf0\x1b\xd4\x97\x81\x01\xa7\x43\x6b\x9b\xfd\xd0\x0a\xa6\x9d\x6d\xc4\x23\xaf\xad\xbf\x94\xaa\xec\xed\xa9\x14\x12\xce\xfe\xac\xda\x05\x0f\xe0\xe1\x82\x9d\x00\x4e\xb2\xf7\x4d\xba\x46\x6e\x5f\x5c\xe6\xdc\xfd\x08\x00\x00\xff\xff\x50\x5a\x5c\xfa\xe1\x02\x00\x00")

func gkgenBcp47TmplBytes() ([]byte, error) {
	return bindataRead(
		_gkgenBcp47Tmpl,
		"gkgen/bcp47.tmpl",
	)
}

func gkgenBcp47Tmpl() (*asset, error) {
	bytes, err := gkgenBcp47TmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/bcp47.tmpl", size: 737, mode: os.FileMode(420), modTime: time.Unix(1478139634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gkgenDiveTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xcf\x6a\x33\x31\x0c\xc4\xef\x7e\x8a\xf9\x16\x42\x76\x03\xd9\xdc\xbf\x92\x43\xa1\x7f\xe8\xa5\x14\x5a\x7a\x37\xb1\x5c\x44\x5d\x3b\xd8\x6e\x4a\x10\x7a\xf7\xb2\xeb\xa4\x81\xf6\x26\x89\xd1\xcc\x8f\x11\xd9\xac\x0c\xe0\xf8\x40\xf8\xe2\x10\xb0\xb3\x21\xe0\x2d\xbd\xdb\x23\x0e\x36\xb0\xb3\x95\x90\x22\x2c\x4a\xcd\x9f\xbb\x6a\x80\xd5\x46\xd5\x88\x38\xf2\x1c\x09\xdd\xf4\xda\xcd\x17\xb0\x47\xca\xe8\xb9\x3c\xcf\x5a\x8c\xc3\x65\x79\xaa\x19\xe3\xf0\xa3\x7b\x28\xf3\x01\xaa\xec\x51\x46\x91\xf1\x8e\x29\xb8\x47\xfb\x41\xaa\xf8\xb7\x45\xe4\x00\x81\xc8\x1a\x14\x9d\xaa\x61\x0f\xca\x19\xff\xb7\x0d\x6e\x7c\x3d\xc1\xf5\xbf\x9f\x87\xab\x59\x78\xb6\x30\x80\x08\xae\x9d\xbb\xcd\x39\x4d\x89\x1d\xe5\xdc\x41\xd5\xfc\x45\x51\x91\x16\x26\x02\x0a\x85\xd0\xc6\x7b\x8a\x94\x6d\xe5\x14\x9b\x47\xbf\xcf\x1c\xab\x47\x77\x33\xb5\xc6\x05\x31\xd5\x56\xd6\xd4\x94\x9f\x50\xb0\x5c\x14\x2c\xca\xb2\xc3\x05\xed\x34\xbe\x1c\xf7\x34\x34\xe7\x73\x18\x45\x87\xb5\xaa\xf9\x0e\x00\x00\xff\xff\x82\x88\x1c\x8e\x8d\x01\x00\x00")

func gkgenDiveTmplBytes() ([]byte, error) {
	return bindataRead(
		_gkgenDiveTmpl,
		"gkgen/dive.tmpl",
	)
}

func gkgenDiveTmpl() (*asset, error) {
	bytes, err := gkgenDiveTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/dive.tmpl", size: 397, mode: os.FileMode(420), modTime: time.Unix(1478145221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gkgenHexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\xfb\x04\x7a\xb1\x1f\x89\x3f\xe0\x95\x2c\xba\x68\x9b\x6c\x4a\x17\xdd\x85\x40\x0c\x1a\x19\x51\x47\x4e\x25\x53\x12\x86\xf9\xf7\x22\x99\xb4\x4e\x49\xdb\x95\x8d\x90\xee\x39\x77\xa6\x60\x36\x64\x9d\x27\xa8\x15\x1d\x95\x48\xc1\x0c\x67\x41\xaf\xa8\xef\x1d\x75\xe6\xf9\x74\x20\xa8\x38\x04\xe7\x5b\x05\xf5\xef\xfc\x27\x52\xa4\x6b\x21\xe0\xff\x12\x6d\xff\xd2\x9c\xea\x75\x5c\xd1\xb1\x64\x76\x16\xbe\x1f\x50\xae\xe3\xd3\x10\x50\xa3\x12\xf9\xcb\x4c\xde\x88\xc4\x9a\x79\xcc\x7d\x6c\xf6\x24\x52\xdd\xe4\x88\x3f\x4b\x78\xd7\x81\x0b\x80\x19\xb7\xc6\xdc\x85\xd0\xa7\xa7\x8a\x42\xc8\xac\xec\x45\x5d\xa4\x2b\x72\x9b\xed\x87\xde\x66\x7b\x16\x14\x29\x6c\x1f\xe0\xbc\xa1\xe3\x1c\xd1\xf9\xb6\xa3\x4b\x76\x12\x0f\x8d\x6f\x09\x5f\xad\xb2\xc8\x0f\xed\xbe\xe3\x4f\x7a\x5e\xe1\xfd\xd6\xb5\x3c\x04\xe7\x07\x8b\x9d\xdd\x0f\x75\x3e\xb4\xa5\xd2\x3a\x6e\xb4\x36\x5b\x2c\xa0\x75\x54\xf3\xcb\x42\x3a\xce\x53\x66\xb5\xc3\x27\xa8\x4a\xe3\x02\xa6\x23\x1b\xb7\xfa\x40\x9e\x42\x33\xb8\xde\x8f\xc4\x33\x2f\x2d\x1e\x2e\xe6\x9d\xbd\x35\x9d\x33\xe8\x3d\x6c\x8a\xc3\x4c\x47\xe8\x38\x53\x93\xf8\x49\xf3\x6a\x0c\xce\x85\xc7\x2f\x16\x22\xc5\x7b\x00\x00\x00\xff\xff\x3f\xad\xea\x6b\x53\x02\x00\x00")

func gkgenHexTmplBytes() ([]byte, error) {
	return bindataRead(
		_gkgenHexTmpl,
		"gkgen/hex.tmpl",
	)
}

func gkgenHexTmpl() (*asset, error) {
	bytes, err := gkgenHexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/hex.tmpl", size: 595, mode: os.FileMode(420), modTime: time.Unix(1478139634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gkgenLenTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x53\xb1\x6e\xdc\x3a\x10\xec\xf5\x15\xf3\x08\x18\x96\x0c\x58\x07\xfb\x05\x86\x1b\x17\x57\x24\xa9\x62\xb8\x48\x3a\x37\x3c\x71\x25\x11\xa1\x48\x85\x5c\xda\x16\x08\xfd\x7b\x40\xea\x2e\x38\x18\x41\x8a\x14\x69\xb4\x43\x70\x30\x9a\x9d\x5d\x56\x29\x29\xea\xb5\x25\x08\x43\x56\xac\x6b\x95\xd2\xee\x0a\xdf\x02\x81\x47\xc2\x21\x6a\xc3\xd0\x16\x86\x2c\xfa\x68\x3b\xd6\xce\xa2\x77\xbe\xdc\xf2\x32\x53\x00\x8f\x92\x11\xe2\x3c\x3b\xcf\xd0\xdc\xe2\x6a\x57\x64\xa0\x7b\x38\x8f\x1a\x3a\x7c\x91\x33\x5a\x34\x05\xef\xbd\x97\xcb\x76\xa2\x1f\x68\x3f\x69\x32\xea\xeb\x32\x13\x44\x60\xaf\xed\x20\x1a\xd4\xa3\x0c\x4f\x9e\x7a\xfd\x06\xd1\x8d\xd2\x8a\x33\x5a\xb3\xae\x15\xb2\xf4\x7f\xb5\x21\x5b\x87\x36\xa5\xed\xf2\x51\x4e\xb4\xae\x0d\x1e\x1e\x90\x52\xfb\x24\xbd\x9c\xf2\x31\x55\x00\x90\x12\xf6\x4a\x7d\xf4\xde\x79\xb4\x10\x94\x41\x68\x1f\xe9\xb5\x7e\xce\x7d\x0f\x3c\x62\xd2\x61\x92\xdc\x8d\xcf\xa2\x11\x28\x3f\x39\x66\xb1\x57\x4a\xdb\x01\xdd\x48\xdd\xf7\x50\x7a\xd7\x96\x69\x20\x8f\x17\x69\x62\x0e\xc0\xa1\x73\xda\x76\x5a\x11\x5e\x35\x8f\x25\x9b\xd9\x53\x47\x8a\x2c\x23\x10\xe3\xb0\x60\x70\xd7\xb3\x91\xcb\xe0\x5d\xb4\x6a\xf7\x22\x8d\x56\x92\x9d\xff\x95\x16\x99\x40\xb9\xaf\x77\xa1\x68\xcb\xa2\x7c\xef\xb7\x72\x73\xb7\xd5\xff\x6f\xb7\x7a\xf7\x41\x40\xc4\x8d\x15\x8f\xb4\x78\xe2\xc5\x13\x31\x9e\x98\x87\x85\x49\x40\xf8\x68\x29\x0f\xbb\xe4\xf8\x3e\xc3\xdf\x45\xf8\x17\x01\xfe\xa9\xab\xde\x38\x99\x1d\x97\x5a\x1c\x16\x54\x2c\x76\x6e\x9a\x0d\xbd\x9d\xe3\x9b\xdb\xfb\x22\xf9\x6f\xec\x6e\xf3\xf8\x4c\x96\xbc\xcc\xfb\xbe\xc9\xd4\xb3\xd7\x96\xfb\xf2\x4e\xa0\x03\xac\x63\x94\x29\x22\xbf\x88\x6c\x07\x97\x17\x01\x17\xe1\xf2\xb4\xae\xd9\xde\xf9\xe6\x1e\x85\xc9\xaa\x0d\x65\x70\xbd\xae\xd5\xcf\x00\x00\x00\xff\xff\xcc\x41\x1f\xc4\x84\x03\x00\x00")

func gkgenLenTmplBytes() ([]byte, error) {
	return bindataRead(
		_gkgenLenTmpl,
		"gkgen/len.tmpl",
	)
}

func gkgenLenTmpl() (*asset, error) {
	bytes, err := gkgenLenTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/len.tmpl", size: 900, mode: os.FileMode(420), modTime: time.Unix(1478139634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gkgenLengthTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\x4f\x6b\x1b\x3d\x18\xc4\xef\xfb\x29\xe6\x5d\xd8\x37\xb6\x71\x36\xf7\x96\x1c\x72\x68\x43\xa0\x18\x43\x4a\x2f\xc6\x10\xb1\x7a\xb4\x56\x2b\x3f\x72\x25\xd9\x8e\x11\xfa\xee\x45\x52\xdc\x3a\xfd\x43\xe9\x69\x85\x78\x34\xf3\x9b\x91\x36\xc6\x9b\x59\x03\x7c\x20\x1e\xc3\xe6\x93\x30\x5a\x8a\x40\xf7\xc4\x18\x89\xc9\x89\x40\x1e\x83\x95\x84\xb0\x11\x01\x47\x6d\x0c\x0e\xe4\xb4\x3a\x21\x6c\x08\xf4\x2c\x86\x00\x53\xce\xc2\x2a\x08\x3c\x06\xa7\x79\x84\x75\xe7\xd5\xd2\x6a\x0e\xe4\xa0\x34\x19\xd9\x37\xc0\xa3\xd1\x03\x41\xb0\xc4\x9d\x73\xe2\x04\xbf\xdf\xed\xac\x0b\x18\xec\x36\xcf\x1b\x11\xc8\xe5\xb9\x87\x17\x3b\x65\xc4\x08\xd6\x06\xbe\x0a\xee\xaa\xa0\x87\xf0\x38\x64\xde\x39\xf6\x9e\xa0\x19\x83\xe5\xcf\x7b\x1e\x82\xb6\x8c\xa3\x0e\x1b\x2c\x6c\x58\x68\x53\xa7\x44\xb0\x0e\x5a\xe1\x64\xf7\x90\x96\xaf\x02\x8e\x82\x43\x11\x3e\x08\xb3\x27\xdf\x00\xb3\x9b\x94\x9a\x18\x25\x29\xcd\x84\xb6\x76\xd2\x96\xbd\x7c\x94\xbe\xa2\x7f\x9f\x63\x7c\x3c\xed\x08\x6d\xe5\x69\xd1\xce\xce\xab\x94\x9a\x3c\xe6\x1c\xde\xdc\x62\xb4\x5f\xc4\xa9\xaf\x1a\xb5\x8b\x49\x8c\xfd\x52\x38\xb1\x4d\x69\x8e\x18\xb5\x02\xdb\x80\xc9\x83\x5f\x06\x87\x1e\xd3\x94\xfe\x8f\x91\x58\xa6\xe4\xfb\x18\xab\xd5\x42\x6c\x29\xa5\xe9\xdb\xa2\xfa\xdf\x6d\xe1\x8d\x0d\x10\x23\xee\xa4\x7c\xe7\x9c\xcd\x47\x5b\x72\xae\xd8\x17\x54\x32\xb9\x8f\x5f\x78\x57\xeb\xef\xc4\xab\xf5\x99\x39\xa5\x46\xe5\x62\x58\xd2\xf3\x1c\x5e\xf3\x68\xe8\xb5\x77\xce\xe2\x04\x8f\x84\x9f\xa9\x0a\xc8\xbf\x05\xfe\x13\xd2\x45\xf4\xdf\x20\xfc\x2d\xfe\x64\xe7\x34\x07\x85\x27\xb5\x0d\x7d\xd9\x54\x93\xb6\xeb\xfc\xaa\xeb\xe4\x1a\xd7\xe8\x3a\xdf\xce\x5f\x67\xec\xfc\x3c\x6b\x4e\x9f\xf0\xc3\x68\x9a\x1b\x04\x2e\x5b\xac\x77\x7f\x5f\x7f\x05\x6d\xb9\x3a\x9e\xfd\x5e\x5e\x08\xb4\x2f\x37\x59\xde\x19\x2c\xd7\xb7\x8e\xab\xce\xa3\xf3\x57\xed\x85\xc3\x45\xf8\x69\xd5\x2e\x99\xeb\x17\xd7\x29\x35\xdf\x02\x00\x00\xff\xff\x76\xf7\xfb\xc2\x8f\x03\x00\x00")

func gkgenLengthTmplBytes() ([]byte, error) {
	return bindataRead(
		_gkgenLengthTmpl,
		"gkgen/length.tmpl",
	)
}

func gkgenLengthTmpl() (*asset, error) {
	bytes, err := gkgenLengthTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/length.tmpl", size: 911, mode: os.FileMode(420), modTime: time.Unix(1478139634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gkgenMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\xcd\x8a\xdb\x30\x10\xbe\xfb\x29\x3e\x4c\xa0\x76\x58\xdb\x7b\x5e\xc8\x1e\xda\x86\x92\xc3\xa6\xd0\x96\x5e\x4a\x0f\xaa\x3d\xb1\x45\x64\xd9\xc8\xf2\xb6\x5b\xa1\x77\x2f\xfa\x71\x62\xb2\x4b\x73\x10\x8a\x66\xf4\xfd\x69\x6c\x4c\x81\x86\x4e\x5c\x12\xd2\x8e\x58\x43\x2a\xb5\x36\x19\x59\x7d\x66\x2d\xc1\x98\x32\x6e\xad\x4d\x12\xde\x8f\x83\xd2\xc8\x92\xb4\xe5\xba\x9b\x7f\x95\xf5\xd0\x57\x7f\x49\xd6\x43\x43\xaa\x6a\x87\x33\x7b\x09\x6b\x9a\xe4\x89\x31\x24\x1b\x14\xee\xde\x9a\x63\xd2\x6a\xae\xb5\xe3\x30\x66\xa3\x66\x41\x4f\x6c\xc4\xc3\x0e\xa5\xdb\x4f\xbe\xff\x34\xcb\x1a\xd9\x84\xad\x31\xa5\x64\x3d\x59\x9b\xe3\x3b\x13\xbc\x61\x9a\x90\xe5\xc8\x48\xa9\x41\xe5\x30\x09\x60\x4c\xb5\xc5\x67\x29\x5e\xd0\xb3\x33\x41\x77\x04\x5f\x9d\xd0\xb3\x11\xfc\x84\xdf\xf4\x4e\x11\xda\x81\xcb\x16\x7a\xc0\x3c\x11\xb8\x2e\xb1\xad\xac\xf5\xd7\x0b\xd7\xd4\x6a\x64\x82\x64\x14\x91\xe3\xde\xeb\x00\xa8\x77\xd2\x1c\x72\xe6\x7d\x95\x7b\x87\xfd\xc4\xc6\xdc\xdf\x85\x73\x18\x71\xaa\x2d\x0e\x9a\x94\x93\xa8\x3b\x35\xcc\x6d\xe7\xc5\x38\x40\x2f\x45\x0f\xa8\x15\x85\x72\x38\x9e\xae\x22\x14\x93\x2d\x61\xe3\xcc\xde\x61\x73\xe2\x24\x9a\x9b\x4c\x00\x4f\xb8\x09\x27\x0f\xbb\xd8\x55\x7e\xb9\xed\x58\xb9\xd9\xdc\xb8\x01\xaa\x0a\xef\xf7\x9f\x0e\x47\x0f\xe5\xd8\x60\xed\x12\x2d\x1f\xe4\xe4\x9b\x9e\x99\x8a\x19\xae\xbb\x56\xfe\xbf\x0a\x5e\x53\xe4\x2b\x10\xb5\xab\x83\x6c\xe8\xcf\x5d\x20\xf5\x02\x83\xd4\xc8\xec\xb9\x17\x03\xe5\xd1\x81\x16\x97\x92\x83\xf9\xc0\x84\xf8\x46\xfd\x28\x5c\x44\x01\x24\xac\x17\x6b\x85\x8b\x3b\xfe\xe3\x27\x08\x92\xd9\x2b\x99\x39\x1e\x71\xef\x07\xc3\xfd\xa8\xff\x91\xae\x8a\xe9\x4f\xec\x5e\x3b\xf3\xbd\x97\x78\xf6\xc7\x8f\xff\x0d\x67\x89\x79\xf5\xf2\x57\x5d\xd7\x61\xac\x3b\xaa\xcf\x6f\x4e\x23\x3a\xf6\x1c\xdf\x7f\x35\x85\x6f\x0f\xa1\x2f\x2e\x56\xfb\x1c\x8f\x8b\x35\x45\x7a\x56\x12\xd4\x27\x41\xfa\x5a\x44\xac\x49\x2e\x12\x1b\x3e\x42\x6b\x93\x7f\x01\x00\x00\xff\xff\xa4\x00\x0f\xfb\xe6\x03\x00\x00")

func gkgenMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_gkgenMainTmpl,
		"gkgen/main.tmpl",
	)
}

func gkgenMainTmpl() (*asset, error) {
	bytes, err := gkgenMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/main.tmpl", size: 998, mode: os.FileMode(420), modTime: time.Unix(1478145381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gkgenNotnilTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xc1\x4a\x43\x31\x10\x45\xf7\xef\x2b\x2e\x81\xd2\x76\x61\xfe\xa0\x0b\x17\x2a\x6e\xb2\x72\xd9\xcd\x93\x4c\x60\x60\x9c\x94\x4c\x54\x64\xc8\xbf\x4b\xda\x3e\x5d\x04\x0e\x81\xb9\xe7\xb8\x67\x2a\xac\x84\x90\x6a\x4f\x2c\x61\x8c\x05\x70\x07\x17\xbc\x5a\xfa\x14\x59\xdf\x85\x10\x71\xfd\xe7\x02\x8b\xee\xf1\x99\x49\x72\x5a\x3f\x68\x0c\x9c\x4e\x50\x16\xf8\x02\x5c\x0f\x1f\x73\x7e\x6a\xad\x36\x44\x04\x9a\x60\x31\xd1\xf7\xe1\x1c\xd8\x90\x58\xce\xe1\x18\x6e\x63\x77\x11\x89\x11\x36\xeb\x0b\x29\xb5\xb5\x73\xd5\xdb\xc6\xe1\xd2\x58\x7b\xd9\xea\xc0\x06\xad\x1d\x5f\xab\x70\x46\x55\xe8\x7c\x5b\x64\x99\x55\xd8\xef\x0c\x3b\xdb\x07\xfc\x57\xde\xf1\xed\xe7\x42\xc7\x3f\x15\x69\x9e\xec\x3e\xe1\x61\x8c\xe5\x37\x00\x00\xff\xff\x40\xc6\x56\x39\x0b\x01\x00\x00")

func gkgenNotnilTmplBytes() ([]byte, error) {
	return bindataRead(
		_gkgenNotnilTmpl,
		"gkgen/notnil.tmpl",
	)
}

func gkgenNotnilTmpl() (*asset, error) {
	bytes, err := gkgenNotnilTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/notnil.tmpl", size: 267, mode: os.FileMode(420), modTime: time.Unix(1478139634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gkgenRequiredTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x92\x31\x4f\x23\x31\x10\x85\xfb\xfc\x8a\xd1\x54\x77\xc5\xad\x94\x1c\x8a\xd2\xa4\xa0\x00\x44\x93\x02\x28\xd3\x38\xd9\xd9\x68\x24\xc7\xde\x8c\xed\x40\xb0\xf6\xbf\x23\xdb\xbb\x11\x42\x10\x22\x10\x12\xcd\xce\x78\xf5\xfc\xde\x27\xeb\xc5\x58\x53\xc3\x86\x00\x85\x76\x81\x85\x6a\xec\xba\x11\x40\x8c\xc0\x0d\xdc\xba\x45\xd0\x5a\xad\x34\x41\x05\xf9\x3f\x37\xe0\xaa\x18\xab\x6b\x26\x5d\x2f\xd4\x96\xba\x0e\xe6\x73\x30\xac\x21\x8e\x00\xf2\xc5\xcb\xba\xbe\x12\xb1\x02\x15\x20\xa5\xc5\x55\x0b\x7a\xfc\xb3\x44\x76\x30\xa4\x2c\xf1\x2f\x16\xc7\x3e\x8d\xb4\xa3\xe4\x4e\x3b\x28\xe6\x0f\x87\x96\x00\x9d\x17\x36\x1b\x3c\x19\x8e\xf8\x33\xd9\x6c\x3c\xe6\xef\xac\x8c\xf1\xb4\xcc\xff\x93\x32\xa7\x17\x08\x18\x8a\x2a\xf4\xb2\x30\xe8\xc2\x20\x0c\x83\x72\x75\xf0\x84\x80\x12\x0c\x1d\xdf\xf8\x86\x0c\x89\xf2\x6c\x4d\xa1\xc6\xbb\x9e\x11\xac\x01\x36\x9e\x36\x24\xb0\x57\x3a\x90\x03\x76\x60\xac\x07\x17\xda\xd6\x8a\xa7\xba\x3a\xba\x7c\xc0\xdf\x68\xab\x12\x5b\x9e\x99\x25\x6f\x19\x66\x6d\xb7\xad\xa6\xa7\xd7\xfb\x78\x32\xeb\x9f\xe5\x33\x30\x13\xb6\x24\xbc\x56\xfa\xcb\x68\x2b\x6b\xf5\x99\x61\x49\x4a\xca\x9c\x1f\xc5\xee\xde\x4b\x58\xfb\xa1\xb2\x7b\x25\xf0\x4c\x62\xdf\x14\x67\x38\x26\xa0\x53\xed\x7a\xef\xea\xf7\xdb\xf6\x3b\xc9\x4c\x9d\xce\x31\xa6\xe5\x5f\xd7\x8d\x5e\x02\x00\x00\xff\xff\x27\x20\x7c\xc5\x1e\x04\x00\x00")

func gkgenRequiredTmplBytes() ([]byte, error) {
	return bindataRead(
		_gkgenRequiredTmpl,
		"gkgen/required.tmpl",
	)
}

func gkgenRequiredTmpl() (*asset, error) {
	bytes, err := gkgenRequiredTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/required.tmpl", size: 1054, mode: os.FileMode(420), modTime: time.Unix(1478139634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gkgenUuidTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xcd\x6a\xeb\x30\x10\x85\xf7\x7e\x8a\x73\x05\xba\xb1\x2f\x89\x1f\xe0\x96\x2c\x0a\xfd\x21\x9b\xd2\x45\xb3\x0a\x81\x18\x34\x32\xa2\x8e\x9c\x4a\xa6\x34\x0c\xf3\xee\x45\x32\x69\x9d\x92\xb6\x2b\x1b\x21\x7d\xe7\x3b\x33\x05\xb3\x21\xeb\x3c\x41\xad\xd7\xab\x1b\x25\x52\x30\xc3\x59\xd0\x0b\xea\x3b\x47\x9d\x79\x3a\x1e\x08\x2a\x0e\xc1\xf9\x56\x41\xfd\x3b\xfd\x89\x14\xe9\x5a\x08\xf8\xbf\x44\xdb\x3f\x37\xc7\x7a\x15\x13\xa3\x64\x76\x16\xbe\x1f\x50\xae\xe2\xe3\x10\x50\xa3\x12\xf9\xcb\x4c\xde\x88\xc4\x9a\x79\x04\x3f\x34\x7b\x12\xa9\xae\x32\xe3\xcf\x12\xde\x75\xe0\x02\x60\xc6\xb5\x31\xb7\x21\xf4\xe9\xa9\xa2\x10\x72\x58\x16\xa3\x2e\xd2\x05\xbb\xcd\xf6\xc3\x6f\xb3\x3d\x19\x8a\x14\xb6\x0f\x70\xde\xd0\xdb\x1c\xd1\xf9\xb6\xa3\xf3\xec\x64\x1e\x1a\xdf\x12\xbe\x5a\x65\x91\x9f\xea\x7d\x27\x30\x29\x7a\x21\xf0\xb7\xb2\xe5\x21\x38\x3f\x58\xec\xec\x7e\xa8\xf3\xa1\x2d\x95\xd6\x71\xa3\xb5\xd9\x62\x01\xad\xa3\x9a\x9f\x37\xd2\x71\x9e\x98\xd5\x0e\x9f\x41\x55\x9a\x17\x30\x9d\xd9\xb8\xd7\x7b\xf2\x14\x9a\xc1\xf5\x7e\x4c\x3c\xe5\xe5\xdd\xc3\xc5\xbc\xb5\xd7\xa6\x73\x06\xbd\x87\x4d\x3c\xcc\x74\x84\x8e\x33\x35\xe1\x4f\xaa\x57\x23\x39\x37\x1e\xbf\x58\x88\x14\xef\x01\x00\x00\xff\xff\xab\xf2\x79\x30\x57\x02\x00\x00")

func gkgenUuidTmplBytes() ([]byte, error) {
	return bindataRead(
		_gkgenUuidTmpl,
		"gkgen/uuid.tmpl",
	)
}

func gkgenUuidTmpl() (*asset, error) {
	bytes, err := gkgenUuidTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gkgen/uuid.tmpl", size: 599, mode: os.FileMode(420), modTime: time.Unix(1478139634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gkgen/bcp47.tmpl": gkgenBcp47Tmpl,
	"gkgen/dive.tmpl": gkgenDiveTmpl,
	"gkgen/hex.tmpl": gkgenHexTmpl,
	"gkgen/len.tmpl": gkgenLenTmpl,
	"gkgen/length.tmpl": gkgenLengthTmpl,
	"gkgen/main.tmpl": gkgenMainTmpl,
	"gkgen/notnil.tmpl": gkgenNotnilTmpl,
	"gkgen/required.tmpl": gkgenRequiredTmpl,
	"gkgen/uuid.tmpl": gkgenUuidTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gkgen": &bintree{nil, map[string]*bintree{
		"bcp47.tmpl": &bintree{gkgenBcp47Tmpl, map[string]*bintree{}},
		"dive.tmpl": &bintree{gkgenDiveTmpl, map[string]*bintree{}},
		"hex.tmpl": &bintree{gkgenHexTmpl, map[string]*bintree{}},
		"len.tmpl": &bintree{gkgenLenTmpl, map[string]*bintree{}},
		"length.tmpl": &bintree{gkgenLengthTmpl, map[string]*bintree{}},
		"main.tmpl": &bintree{gkgenMainTmpl, map[string]*bintree{}},
		"notnil.tmpl": &bintree{gkgenNotnilTmpl, map[string]*bintree{}},
		"required.tmpl": &bintree{gkgenRequiredTmpl, map[string]*bintree{}},
		"uuid.tmpl": &bintree{gkgenUuidTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

