{{- define "header"}}
package {{.package}}

import (
"github.com/zencoder/gokay/gokay"
)
{{end -}}

{{- define "struct"}}
{{$ruleMap := .rules -}}
func (s *{{.name}}) Validate () (error) {
  {{/* Only make the errors map if we're going to use it. */}}
  {{- if gt (len .rules) 0 -}}
  em := make(gokay.ErrorMap)
  {{ end }}
  {{/* Iterate through the rule map to create the rules */}}
  {{range $name, $field := .rules -}}
    {{ $rules := $field.Rules -}}
    {{ if gt (len $rules) 0 -}}
    // BEGIN {{ $name }} Validations
    var errors{{ $name }} gokay.ErrorSlice
    {{- range $rIndex, $rule := $rules }}
      // {{ $rule.Name -}}
      {{- CallTemplate $rule $rule }}
    {{- end}}
    if len(errors{{ $name }}) > 0 {
      em["{{ $name }}"] = errors{{ $name }}
    }
    // END {{ $name }} Validations
    
    {{ end }}
  {{- end}}
  {{/* Only check the errors map if we have rules. */}}
  {{ if gt (len .rules) 0 }}
  if len(em) >0 {
    return em
  }
  {{- end}}
  return nil
}
{{end}}
